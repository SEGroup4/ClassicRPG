package classicRPG.model;
import java.util.Random;

/**
 * A class to calculate damage in battle. Defend damage is calculated to 0 (if
 * successful)
 */
public class Damage {
	public static final int DEFEND_MAX_RANGE = 25;
	private Random rand;
	private int base;

	public Damage() {
		this.rand = new Random();
		this.base = 0;
	}

	/**
	 * Returns a random number according to character statistics
	 * 
	 * @param base the lowest number in the range of random number generation
	 * @param stat the highest number in range
	 * @return the random number
	 */
	public int randomDamage(int base, int stat) {
		int damage = rand.nextInt((stat + 1) - base) + base;
		return damage;
	}

	/**
	 * Uses the random method to return the attack damage for each attack
	 * 
	 * @param strength the strength statistic of the character class
	 * @return the attack damage
	 */
	public int attackDamage(int strength) {
		// Simple calculations to acquire the lowest and highest numbers to use in
		// random method according to character strength. STAT_MODIFIER = 2;
		base = strength / Character.STAT_MODIFIER;
		strength = strength + Character.STAT_MODIFIER;

		int attackDamage = randomDamage(base, strength);
		return attackDamage;
	}

	/**
	 * Uses the random method to return the ability damage for each attack
	 * 
	 * @param magicPoints the magic point statistic of the character class
	 * @return the ability damage
	 */
	public int abilityDamage(int magicPoints) {
		// Same as attackDamage except using multiplication instead of addition for
		// calculating the highest number in range
		base = magicPoints / Character.STAT_MODIFIER;
		magicPoints = magicPoints * Character.STAT_MODIFIER;

		int abilityDamage = randomDamage(base, magicPoints);
		return abilityDamage;
	}

	/**
	 * Returns 0 if defend is successful, normal damage if not. Successful defend is
	 * dependent upon character speed statistic.
	 * 
	 * @param speed the speed of the character
	 * @param attackDamage the calculated damage of an enemy attack
	 * @param element the player character object
	 * @return the numerical value of attack damage after a defend
	 */
	public int defend(int speed, int attackDamage, Character element) {
		base = 0;
		// Similar to attack and ability calculations.
		int successRange = speed * (Character.STAT_MODIFIER + 1);
		int successNumber = 0;
		successNumber = randomDamage(base, DEFEND_MAX_RANGE);
		// If random number from 1-25 is less than a number generated by a range
		// dependent on a character's speed than attack damage is 0 and defend is
		// successful
		if (successNumber < successRange) {
			System.out.println(element.getName() + " successfully defended the attack!");
			return base;
		} else {
			System.out.println(element.getName() + " was not fast enough to defend the attack!");
			return attackDamage;
		}
	}

	// Needed to test if player chose defend when enemy is attacking
	public void defensiveStance(Character element) {
		element.setDefending(true);
		System.out.println(element.getName() + " enters a defensive stance\n");
	}

}
